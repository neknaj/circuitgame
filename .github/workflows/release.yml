name: Auto Release After 6 Hours

# Releasesへのファイル追加のために書き込み権限が必要
permissions:
  contents: write
  
on:
  schedule:
    - cron: "0 * * * *" # 毎時0分に実行

jobs:
  auto-release:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.set_version.outputs.new_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get the last release commit
        id: last_release_commit
        run: |
          last_release_commit=$(git rev-list --tags --max-count=1)
          echo "last_release_commit=$last_release_commit" >> $GITHUB_ENV

      - name: Get the latest commit
        id: latest_commit
        run: |
          latest_commit=$(git rev-parse HEAD)
          echo "latest_commit=$latest_commit" >> $GITHUB_ENV

      - name: Get last commit timestamp
        id: last_commit
        run: |
          echo "timestamp=$(git log -1 --format=%ct)" >> $GITHUB_ENV

      - name: Check release conditions
        id: check_release_conditions
        run: |
          # 6時間経過のチェック
          current_time=$(date +%s)
          last_commit_time=${{ env.timestamp }}
          time_diff=$((current_time - last_commit_time))
          echo "Time since last commit: $time_diff seconds"

          if [ $time_diff -lt 21600 ]; then
            echo "6 hours have not passed since the last commit. Skipping release."
            exit 0
          fi

          # リリース条件のチェック（前回のリリースと最新コミットの一致）
          if [ "${{ env.last_release_commit }}" = "${{ env.latest_commit }}" ]; then
            echo "The last release commit matches the latest commit. Skipping release."
            exit 0
          fi

      - name: Get latest version tag
        id: set_version
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          version=${latest_tag#v}
          major=${version%%.*}
          minor=${version#*.}
          minor=${minor%%.*}
          new_minor=$((minor + 1))
          new_version="v${major}.${new_minor}.0"
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "::set-output name=new_version::$new_version"
          
  build:
    needs: [auto-release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: false
            extension: ""
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use-cross: true
            extension: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            use-cross: false
            extension: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            use-cross: true
            extension: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use-cross: false
            extension: ".exe"

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      # macOS 環境用の Xcode Command Line Tools インストール
      - name: Install Xcode Command Line Tools (macOS only)
        if: runner.os == 'macOS'
        run: |
          xcode-select --install || echo "Xcode tools already installed"
          
      # Rustのpackage名を取得して環境変数に入れておく。(後のステップで使用)
      - name: Extract crate information
        shell: bash
        run: |
          echo "PROJECT_NAME=circuitgame_bin" >> $GITHUB_ENV

      # rustcやcargoをインストール
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          profile: minimal

      # targetに応じてcargoもしくはcrossを使用してビルド
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.use-cross }}
          command: build
          args: --release --target ${{ matrix.target }}

      # ビルド済みバイナリをリネーム
      - name: Rename artifacts
        shell: bash
        run: |
          mv target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }}{,-${{ github.ref_name }}-${{ matrix.target }}${{ matrix.extension }}}

      # ビルド済みバイナリをReleasesに配置
      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }}-${{ github.ref_name }}-${{ matrix.target }}${{ matrix.extension }}
          tag_name: ${{ needs.auto-release.outputs.version }}
      
          releaseName: Release ${{ needs.auto-release.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
